version: 0.1
component: build
timeoutInSeconds: 12000
runAs: root
shell: bash
env:
  variables:
    "testEnv" : "testValue1"
  exportedVariables:
    - testEnv
    - push_result
    - testEnv1
    - abs_var

# inputArtifacts:
#   - name: hello-dev-jar
#     location: /workspace/Source1/hello123.class

steps:
  - type: Command
    name: "Build Source"
    timeoutInSeconds: 4000
    command: |
      echo $testEnv
      git remote -vv
      echo $OCI_RESOURCE_PRINCIPAL_RPST
      echo ---------------------------------------
      cat $OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM
      export testEnv=5.0
      echo OCI_STAGE_ID: $OCI_STAGE_ID
      echo OCI_PIPELINE_ID: $OCI_PIPELINE_ID
      echo OCI_BUILD_RUN_ID: $OCI_BUILD_RUN_ID
      echo OCI_TRIGGER_COMMIT_HASH: $OCI_TRIGGER_COMMIT_HASH
      echo OCI_TRIGGER_SOURCE_BRANCH_NAME: $OCI_TRIGGER_SOURCE_BRANCH_NAME
      echo OCI_TRIGGER_SOURCE_URL: $OCI_TRIGGER_SOURCE_URL
      echo OCI_TRIGGER_EVENT_TYPE: $OCI_TRIGGER_EVENT_TYPE
      echo OCI_PRIMARY_SOURCE_DIR: $OCI_PRIMARY_SOURCE_DIR
      echo OCI_WORKSPACE_DIR: $OCI_WORKSPACE_DIR
      echo OCI_BUILD_STAGE_NAME: $OCI_BUILD_STAGE_NAME
      echo OCI_PRIMARY_SOURCE_NAME: $OCI_PRIMARY_SOURCE_NAME
      export minor_version=135
      export OCI_RESOURCE_PRINCIPAL_VERSION=2.2
      echo "signing setup "
      
      yum remove python3
      yum update -y
      yum groupinstall -y 'Development Tools'
      yum install -y gcc openssl-devel bzip2-devel libffi-devel
      
      wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz
      tar xzf openssl-1.1.1o.tar.gz -C /usr/share
      /usr/share/openssl-1.1.1o/config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl
      make clean
      make -j1 depend
      make -j
      make install_sw
      wget https://www.python.org/ftp/python/3.10.7/Python-3.10.7.tgz
      tar xzf Python-3.10.7.tgz -C /usr/share
      /usr/share/Python-3.10.7/configure   -C --with-openssl=/usr/local/openssl --with-openssl-rpath=auto
      make install
      python3.10 -m pip install --upgrade pip
      pip3.10 install -U setuptools
      python3 --version
      
      echo "signing setup complete"
      echo "tring signing "

      oci os ns get
      oci artifacts container image-signature sign-upload --compartment-id ocid1.compartment.oc1..aaaaaaaakgh3udl7bpnhy5oiy4pot4ifq7bcnwabrk4p7uoudrbn6elfmkeq --kms-key-id ocid1.key.oc1.iad.bzqrwv6raaeug.abuwcljstc6cfnyz7wb6fsyfc2ngwmfliwyjjvjouezowfmpxt6ew5i7a5ka --kms-key-version-id ocid1.keyversion.oc1.iad.bzqrwv6raaeug.asqkmnb4icaaa.abuwcljsazgrg4i4ml4e6yz27ly3sztqxmb7yjcmdsn3rdmsdclrduileuaa --signing-algorithm SHA_512_RSA_PKCS_PSS --image-id ocid1.containerimage.oc1.iad.0.id204we8d65n.aaaaaaaaz4srptkg46kvprv5y365plwzkd7xtphhgeqmbw2xq7mqen7jhg5a --output json --debug
      echo "done signing "
      testEnv1=`oci os ns get`
      echo "hello world"
      ls -lart
      git branch
      df -h > output1.txt
      cd src/main/java/org/example/
      echo "commit7" > output.txt
      javac HelloWorld.java
    onFailure:
      - type: Command
        timeoutInSeconds: 400
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root
  - type: Command
    timeoutInSeconds: 400
    name: "Dockerizer & Test"
    command: |
      docker build -t iad.ocir.io/id204we8d65n/balaregistry/hello-bala:1.0 . > test.txt
      prevExitCode=$?   # capture the exit value of the previous command
      if [ $prevExitCode -ne 0 ]; then exit $prevExitCode; fi
      echo "printing exitcode: $prevExitCode"
      push_result=`cat test.txt`
      docker run iad.ocir.io/id204we8d65n/balaregistry/hello-bala:1.0
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root

outputArtifacts:
  - name: output1
    type: BINARY
    location: ${OCI_WORKSPACE_DIR}/Source1/output1.txt
#   - name: output
#     type: BINARY
#     location: src/main/java/org/example/output.txt
#   - name: hello-dev-jar
#     type: BINARY
#     artifactParams:
#       testKey: testVal
#       testKey1: ${testEnv}
#       testKey2: ${invalidVar}
#     location: src/main/java/org/example/HelloWorld.class
  - name: hello-dev-image
    type: DOCKER_IMAGE
    location: iad.ocir.io/id204we8d65n/balaregistry/hello-bala:1.0
